openapi: 3.0.0
info:
  title: dbt Cloud API
  description: |
    The dbt Cloud API makes it possible to fetch data from your
    dbt Cloud account and programmatically run and monitor dbt jobs.

    # Deprecation Notice
    dbt Cloud API v4 will be DEPRECATED by April 30th, 2023. We are advising migration to 
    dbt Cloud API v2. You can find out more in [Migrating to dbt Cloud Administrative API v2](https://docs.getdbt.com/docs/dbt-cloud-apis/migrating-to-v2). If you need further help, support for 
    partners can be provided using shared Slack channels or reaching out to partnerships@dbtlabs.com. 
    All others can reach out to [dbt Support](https://docs.getdbt.com/docs/dbt-support).

    # Authentication

    To authenticate an application with the dbt Cloud API, navigate to the
    API Settings page in your [dbt Cloud profile](https://cloud.getdbt.com/#/profile/api/).
    If you cannot access this page, confirm that your dbt Cloud account has access to the API,
    and that you are using the hosted version of dbt Cloud. If dbt Cloud is running inside of a VPC
    in an Enterprise account, contact your account manager for help finding your API key.

    ## TokenAuth

    Once you've found your API key, use it in the Authorization header of requests to the dbt Cloud API.
    Be sure to include the `Token` prefix in the Authorization header, or the request will fail with a
    "401 Unauthorized" error. Note: `Bearer` can be used in place of `Token` in the Authorization header.
    Both syntaxes are equivalent.

    **Headers**
    ```
    Accept: application/json
    Authorization: Token <your token>
    ```

    # Pagination

    All top-level API resources have support for bulk fetches via "list" API methods. These list
    API methods will return a continuation token via the `x-dbt-continuation-token` header to indicate
    that there are more results. To request the next page of results, pass the token via the same
    header in the next request. If the header is not present in a response, then there are no more
    pages to retrive.

    **Header**
    ```
    x-dbt-continuation-token: <token from earlier request>
    ```

    ## Example request
    ```
    curl --request GET \
      --url https://cloud.getdbt.com/api/v4/accounts/2563/runs \
      --header 'Content-Type: application/json' \
      --header 'x-dbt-continuation-token: <token from earlier request>'
    ```
  version: 4.0.0

servers:
  - url: https://cloud.getdbt.com/api/{version}
    variables:
      version:
        default: v4

paths:
  /accounts/{accountID}/runs:
    parameters:
      - $ref: "#/components/parameters/accountIDParam"
      - $ref: "#/components/parameters/continuationTokenParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/environmentParam"
      - $ref: "#/components/parameters/projectParam"
      - $ref: "#/components/parameters/jobParam"
      - $ref: "#/components/parameters/statusParam"
    get:
      summary: List all runs
      description: |
        Returns a list of runs in the account. The runs are returned sorted by creation date, with the most recent run
        appearing first.
      tags:
        - Runs
      operationId: list-account-runs
      responses:
        "200":
          description: |
            OK - Everything worked as expected.
          headers:
            x-dbt-continuation-token:
              description: |
                An opaque value generated by the server that the client can use to paginate resources of the same request.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunListEnvelope"
              example:
                {
                  "data": [
                    {
                      "id": "22336286",
                      "environment_id": "245",
                      "account_id": "4387",
                      "project_id": "2718",
                      "job_id": "3189",
                      "trigger": {
                        "cause": "github_pull_request",
                        "git_provider": "github",
                        "pull_request_id": "499",
                        "git_branch": "feature/new-model",
                        "git_sha": "e89563ec7a66976cd484223e1529dc5c4d51ffd9",
                      },
                      "replace": {
                        "schema_with": "dbt_cloud_pr_3189_499",
                        "target_name_with": null,
                        "dbt_version_with": null,
                        "generate_docs_with": null,
                        "run_steps_with": [ ],
                        "thread_count_with": null,
                        "timeout_after_with": 600,
                      },
                      "href": "https://cloud.getdbt.com/api/v4/accounts/4387/runs/22336286",
                      "status": "Succeeded",
                      "status_message": null,
                      "dbt_version": "0.19.2",
                      "waiting_on": [ ],
                      "triggered_at": 1625096719,
                      "created_at": 1625096721,
                      "updated_at": 1625096803,
                      "dequeued_at": 1625096734,
                      "started_at": 1625096739,
                      "finished_at": 1625096802,
                      "duration": 81,
                      "queued_duration": 18,
                      "run_duration": 63,
                      "artifacts_saved": true,
                      "has_docs_generated": false,
                      "has_sources_generated": false
                    },
                    {
                      "id": "22335846",
                      "environment_id": "245",
                      "account_id": "4387",
                      "project_id": "2718",
                      "job_id": "3661",
                      "trigger": {
                        "cause": "scheduled",
                        "git_provider": null,
                        "pull_request_id": null,
                        "git_branch": "main",
                        "git_sha": "7964cf4648f6818dfb09e720f00f2e951cf2611c",
                      },
                      "replace": {
                        "schema_with": null,
                        "target_name_with": null,
                        "dbt_version_with": "0.19.0",
                        "generate_docs_with": true,
                        "run_steps_with": [ ],
                        "thread_count_with": null,
                        "timeout_after_with": 300,
                      },
                      "href": "https://cloud.getdbt.com/api/v4/accounts/4387/runs/22335846",
                      "status": "Succeeded",
                      "status_message": null,
                      "dbt_version": "0.19.0",
                      "waiting_on": [ ],
                      "triggered_at": 1625095824,
                      "created_at": 1625095826,
                      "updated_at": 1625095967,
                      "dequeued_at": 1625095903,
                      "started_at": 1625095908,
                      "finished_at": 1625095966,
                      "duration": 140,
                      "queued_duration": 82,
                      "run_duration": 58,
                      "artifacts_saved": true,
                      "has_docs_generated": true,
                      "has_sources_generated": false
                    }
                  ]
                }
        "400":
          description: |
            Bad Request - The request was unacceptable, often due to missing a required parameter.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnvelope"
              example:
                {
                  "error": {
                    "type": "invalid_request_error",
                    "message": "The provided parameter value is not valid: 'abc'."
                  }
                }
        "401":
          description: |
            Unauthorized - No valid API key provided.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnvelope"
              example:
                {
                  "error": {
                    "type": "authentication_error",
                    "message": "You did not provide an API key. You need to provide your API key in the Authorization header, (e.g., `Authorization: Token YOUR_SECRET_KEY`)."
                  }
                }
        "403":
          description: |
            Forbidden - The API key does not have permissions to perform the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnvelope"
              example:
                {
                  "error": {
                    "type": "authentication_error",
                    "message": "The provided API key does not have the permissions necessary to perform the request."
                  }
                }
        "404":
          description: |
            Not Found - The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnvelope"
              example:
                {
                  "error": {
                    "type": "invalid_request_error",
                    "message": "Unrecognized request URL: '/account/1/runs/23320775'."
                  }
                }

  /accounts/{accountID}/runs/{runID}:
    parameters:
      - $ref: "#/components/parameters/accountIDParam"
      - $ref: "#/components/parameters/runIDParam"
    get:
      summary: Retrieve a run
      description: |
        Retrieves the details of an existing run with the given runID.
      tags:
        - Runs
      operationId: get-account-run
      responses:
        "200":
          description: |
            OK - Everything worked as expected.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunEnvelope"
              example:
                {
                  "data": {
                    "id": "22335846",
                    "environment_id": "245",
                    "account_id": "4387",
                    "project_id": "2718",
                    "job_id": "3661",
                    "trigger": {
                      "cause": "scheduled",
                      "git_provider": null,
                      "pull_request_id": null,
                      "git_branch": "main",
                      "git_sha": "7964cf4648f6818dfb09e720f00f2e951cf2611c",
                    },
                    "replace": {
                      "schema_with": null,
                      "target_name_with": null,
                      "dbt_version_with": "0.19.0",
                      "generate_docs_with": true,
                      "run_steps_with": [ ],
                      "thread_count_with": null,
                      "timeout_after_with": 300,
                    },
                    "href": "https://cloud.getdbt.com/api/v4/accounts/4387/runs/22335846",
                    "status": "Succeeded",
                    "status_message": null,
                    "dbt_version": "0.19.0",
                    "waiting_on": [ ],
                    "triggered_at": 1625095824,
                    "created_at": 1625095826,
                    "updated_at": 1625095967,
                    "dequeued_at": 1625095903,
                    "started_at": 1625095908,
                    "finished_at": 1625095966,
                    "duration": 140,
                    "queued_duration": 82,
                    "run_duration": 58,
                    "artifacts_saved": true,
                    "has_docs_generated": true,
                    "has_sources_generated": false
                  }
                }
        "400":
          description: |
            Bad Request - The request was unacceptable, often due to missing a required parameter.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnvelope"
              example:
                {
                  "error": {
                    "type": "invalid_request_error",
                    "message": "The provided parameter value is not valid: 'abc'."
                  }
                }
        "401":
          description: |
            Unauthorized - No valid API key provided.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnvelope"
              example:
                {
                  "error": {
                    "type": "authentication_error",
                    "message": "You did not provide an API key. You need to provide your API key in the Authorization header, (e.g., `Authorization: Token YOUR_SECRET_KEY`)."
                  }
                }
        "403":
          description: |
            Forbidden - The API key does not have permissions to perform the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnvelope"
              example:
                {
                  "error": {
                    "type": "authentication_error",
                    "message": "The provided API key does not have the permissions necessary to perform the request."
                  }
                }
        "404":
          description: |
            Not Found - The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnvelope"
              example:
                {
                  "error": {
                    "type": "invalid_request_error",
                    "message": "Unrecognized request URL: '/account/1/runs/23322631'."
                  }
                }

components:
  parameters:
    accountIDParam:
      description: |
        The account ID to use in a request.
      name: accountID
      in: path
      schema:
        type: string
      required: true

    runIDParam:
      description: |
        The run ID to use in a request.
      name: runID
      in: path
      schema:
        type: string
      required: true

    limitParam:
      description: |
        A limit on the number of objects to be returned, between 1 and 100.
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100

    environmentParam:
      description: |
        A filter on the list based on the object's `environment_id` field.
      name: environment
      in: query
      schema:
        type: string

    projectParam:
      description: |
        A filter on the list based on the object's `project_id` field.
      name: project
      in: query
      schema:
        type: string

    jobParam:
      description: |
        A filter on the list based on the object's `job_id` field.
      name: job
      in: query
      schema:
        type: string

    statusParam:
      description: |
        A filter on the list based on the object's `status` field.
      name: status
      in: query
      schema:
        type: string
        enum: [ "Queued", "Starting", "Running", "Succeeded", "Failed", "Canceled" ]

    continuationTokenParam:
      description: |
        A cursor for use in pagination. `x-dbt-continuation-token` is an opaque token that defines
        your place in the list. For instance, if you make a list request and receive 100 objects, your
        subsequent call can include the token received via the same header to retrieve the next 100 objects.
        The number of objects to retrieve can be controlled with the `limit` parameter.
      name: x-dbt-continuation-token
      in: header
      schema:
        type: string

  schemas:
    RunListEnvelope:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/RunView"

    RunEnvelope:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/RunView"

    RunView:
      type: object
      properties:
        id:
          type: string
          description: |
            A unique identifier for the run.
          example: "22317410"
        environment_id:
          type: string
          description: |
            A unique identifier for the environment.
          example: "245"
        account_id:
          type: string
          description: |
            A unique identifier for the account.
          example: "4387"
        project_id:
          type: string
          description: |
            A unique identifier for the project.
          example: "2718"
        job_id:
          type: string
          description: |
            A unique identifier for the job.
          example: "765532"
        trigger:
          $ref: "#/components/schemas/RunTriggerView"
        replace:
          $ref: "#/components/schemas/RunReplaceView"
        href:
          type: string
          description: |
            A unique URL for the run.
          example: "https://cloud.getdbt.com/api/v4/accounts/4387/runs/22317410"
        status:
          type: string
          enum: [ "Queued", "Starting", "Running", "Succeeded", "Failed", "Canceled" ]
          description: |
            The status of the run is either `Queued`, `Starting`, `Running`, `Succeeded`, `Failed`, or `Canceled`.
          example: "Succeeded"
        status_message:
          type: string
          description: |
            Information about the run status.
        dbt_version:
          type: string
          description: |
            The version of dbt that was used to execute the run.
          example: "0.19.2"
        waiting_on:
          type: array
          items:
            type: string
          description: |
            A list of runs that must complete before this one may proceed.
          example: [ "22334001" ]
        triggered_at:
          type: integer
          description: |
            Time at which the run was triggered. Measured in seconds since the Unix epoch.
          example: 1625072428
        created_at:
          type: integer
          description: |
            Time at which the run was created. Measured in seconds since the Unix epoch.
          example: 1625072430
        updated_at:
          type: integer
          description: |
            Time at which the run was updated. Measured in seconds since the Unix epoch.
          example: 1625072590
        dequeued_at:
          type: integer
          description: |
            Time at which the run was dequeued. Measured in seconds since the Unix epoch.
          example: 1625072524
        started_at:
          type: integer
          description: |
            Time at which the run started executing. Measured in seconds since the Unix epoch.
          example: 1625072529
        finished_at:
          type: integer
          description: |
            Time at which the run finished executing. Measured in seconds since the Unix epoch.
          example: 1625072589
        duration:
          type: integer
          description: |
            The time from when the run was created to when it finished. Measured in seconds.
          example: 159
        queued_duration:
          type: integer
          description: |
            The time from when the run was created to when it started executing. Measured in seconds.
          example: 99
        run_duration:
          type: integer
          description: |
            Time from when the run started executing to when it finished executing. Measured in seconds.
          example: 60
        artifacts_saved:
          type: boolean
          description: |
            Indicates if run artifacts were saved.
          example: true
        has_docs_generated:
          type: boolean
          description: |
            Indicates if docs were generated as part of the run execution.
          example: false
        has_sources_generated:
          type: boolean
          description: |
            Indicates if sources were generated as part of the run execution.
          example: false

    RunTriggerView:
      type: object
      properties:
        cause:
          type: string
          description: |
            The process by which the run was initiated.
          example: "github_pull_request"
        git_provider:
          type: string
          enum: [ "github", "gitlab" ]
          description: |
            The git provider that initiated the run.
          example: "gitlab"
        pull_request_id:
          type: string
          description: |
            The pull request id that initiated the run.
          example: "499"
        git_branch:
          type: string
          description: |
            The git branch that was used to execute the run.
          example: "main"
        git_sha:
          type: string
          description: |
            The git commit that was used to execute the run.
          example: "c7ed89776fd06ea98bb817a1a7d0fd5c9348468d"

    RunReplaceView:
      type: object
      properties:
        schema_with:
          type: string
          description: |
            Replaces the default schema name with the one specified.
          example: "dbt_cloud_pr_677_134"
        target_name_with:
          type: string
          description: |
            Replaces the default target with the one specified.
          example: "staging"
        dbt_version_with:
          type: string
          description: |
            Replaces the default dbt version with the one specified.
          example: "0.19.0"
        generate_docs_with:
          type: boolean
          description: |
            Replaces the default documentation generation behavior with the one specified.
          example: true
        thread_count_with:
          type: integer
          description: |
            Replaces the default number of threads with the amount specified.
          example: 2
        timeout_after_with:
          type: integer
          description: |
            Replaces the run timeout threshold with the one specified.
          example: 300

    ErrorEnvelope:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/ErrorView"

    ErrorView:
      type: object
      properties:
        message:
          type: string
          description: |
            A human-readable message providing more details about the error.
          example: "The provided parameter value is not valid: '0'."
        type:
          type: string
          enum: [ "invalid_request_error", "authentication_error", "api_connection_error", "api_error", "rate_limit_error" ]
          description: |
            The type of error returned. One of `invalid_request_error`, `authentication_error`, `api_connection_error`, `api_error`, or `rate_limit_error`.
          example: "invalid_request_error"
